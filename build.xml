<?xml version="1.0" encoding="UTF-8"?>
<project name="jbilling" basedir="."
    xmlns:jacoco="antlib:org.jacoco.ant"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <property file="jbilling-build.properties"/>
    <property environment="env"/>

    <property unless:set="grails.home" name="grails.home" value="${env.GRAILS_HOME}" />

    <echo message="Building with grails ${grails.home}"/>

    <import file="${grails.home}/src/grails/grails-macros.xml" />

    <target name="build-grails-ant-properties">
        <property name="grails.properties.file" value="grails-ant.properties" />
    
        <uptodate property="gails.classpath.uptodate" targetfile="${grails.properties.file}">
            <srcresources>
                <dirset dir="." includes="lib" />
                <fileset dir="lib/" includes="*.jar" />
                <fileset dir="grails-app/conf/" includes="BuildConfig.groovy" />
            </srcresources>
        </uptodate>

        <echo   unless:set="gails.classpath.uptodate">Generating ${grails.properties.file} file</echo>
        <grails unless:set="gails.classpath.uptodate" command="build-ant-properties">
            <sysprops>
                <sysproperty key="grails.offline.mode" value="false" />
            </sysprops>
        </grails>
        <property file="${grails.properties.file}" />

        <path id="test.classpath" path="${test.classpath}" />
    </target>

    <target name="replace-license-tokens" if="licenseAvailable">
        <replace file = "${build.test.dir}/jbilling.properties" propertyFile = "${basedir}/license.txt">
            <replacefilter token = "licensee name" property = "licensee"/>
            <replacefilter token = "place license key here" property = "licenseKey"/>
        </replace>
    </target>

    <target name="copy-resources">
        <copy todir="${build.test.dir}" file="${source.test.dir}/log4j.properties"/>
        <copy todir="${build.test.dir}" file="${source.descriptor.dir}/spring/jbilling-caching.xml"/>
        <copy todir="${build.test.dir}" file="${source.descriptor.dir}/spring/jbilling-remote-beans.xml"/>
        <copy todir="${build.test.dir}" file="${source.java.dir}/entityNotifications.properties"/>
        <copy todir="${build.test.dir}" file="${source.java.dir}/jbilling.properties"/>
        <copy todir="${build.test.dir}" file="${source.test.dir}/functional/edi_type_sample.xml"/>

        <copy todir="${build.test.dir}">
                <fileset dir="${source.test.dir}/automation/resources/" includes="**"/>
        </copy>
        <available file = "${basedir}/license.txt" property = "licenseAvailable" />
        <antcall if:set="licenseAvailable" target="replace-license-tokens" inheritall="true"/>
    </target>

    <!--
         Testing targets
    -->

    <target name="test" depends="test-unit, test-functional" description="Runs ALL test suites and test cases."/>
    <target name="test-checkin" depends="test-unit, test-ws, test-api-automation" description="Runs unit tests and web-service tests."/>

    <target name="test-unit" depends="init.testng, clean.results" description="Run standalone unit tests. Use -Dgroups to control which test groups are run.">
        <!-- compile tests -->
        <antcall target="compile.tests">
            <param name="suitename" value="unit"/>
        </antcall>

    	<copy todir="${basedir}/resources/mediation">
    		<fileset dir="${source.descriptor.dir}/mediation" includes="RateCard.*"/>
		</copy>
    	
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="test.classpath" />

        <!-- run unit tests -->
        <jacoco:coverage destfile="target/jacoco.exec" append="false">
        <testng suitename="${ant.project.name} Unit Test Suite"
                testname="test-unit"
                classpathref="test.classpath"
                outputDir="${build.test-results.dir}/unit/xml"
                failureProperty="test.failure"
                verbose="2"
                mode="mixed">

            <classfileset dir="${build.test.dir}">
                <include name="**/*Test*.class"/>
                <exclude name="**/*Tester*.class"/>
                <exclude name="**/*TestCase*.class"/>
            </classfileset>
        </testng>
        </jacoco:coverage>

        <antcall target="test.reports">
            <param name="suitename" value="unit"/>
        </antcall>
    </target>

    <target name="test-functional" depends="init.testng, clean.results, copy.mediation-files" description="Run functional tests. Use -Dtestname and -Dgroups to control which test suites and groups are run.">
        <property unless:set="testname" name="testname" value="web-services,integration,usagePools,billing-and-discounts,api-automation" />
        <property unless:set="groups"   name="groups"   value="${testname}" />

        <!-- compile tests -->
        <antcall target="compile.tests">
            <param name="suitename" value="functional"/>
        </antcall>

        <!-- run functional tests -->
        <echo message="Running groups '${groups}' for test config '${testname}'"/>

        <testng suitename="${ant.project.name} Functional Test Suite"
                testnames="${testname}"
                groups="${groups}"
                classpathref="test.classpath"
                outputDir="${build.test-results.dir}/functional/xml"
                failureProperty="test.failure"
                haltonfailure="true"
                verbose="2">

            <xmlfileset dir="${source.test.dir}" includes="testng-functional.xml"/>
        </testng>

        <antcall target="test.reports">
            <param name="suitename" value="functional"/>
        </antcall>
    </target>

    <target name="copy.mediation-files">
    	<delete  dir="${basedir}/resources/mediation"/>
        <mkdir dir="${basedir}/resources/mediation"/>
        <mkdir dir="${basedir}/resources/mediation/errors"/>

        <copy todir="${basedir}/resources/mediation">
            <fileset dir="${source.descriptor.dir}/mediation" includes="mediation.dtd"/>
            <fileset dir="${source.descriptor.dir}/mediation" includes="asterisk.xml"/>
            <fileset dir="${source.descriptor.dir}/mediation" includes="subscription.xml"/>
            <fileset dir="${source.descriptor.dir}/mediation" includes="subscription.csv"/>
            <fileset dir="${source.descriptor.dir}/mediation" includes="asterisk-sample1.csv, asterisk-sample.csv.glo, mediation-batch-test.csv"/>
            <fileset dir="${source.descriptor.dir}/mediation" includes="jbilling_cdr.*"/>
        </copy>
    </target>
   
    <target name="test.reports" if="suitename" unless="test.noreport">
        <junitreport todir="${build.test-results.dir}">
            <fileset dir="${build.test-results.dir}/${suitename}/xml">
                <include name="*/*.xml"/>
            </fileset>
            <report format="noframes" todir="${build.test-results.dir}/${suitename}/html"/>
        </junitreport>
        <fail if="test.failure" message="${ant.project.name} ${suitename} tests failed, see test reports in ${build.test-results-dir}"/>
    </target>

    <target name="compile.tests" if="suitename" depends="clean.tests">
        <mkdir dir="${build.test-results.dir}/${suitename}/xml"/>
        <mkdir dir="${build.test-results.dir}/${suitename}/html"/>

        <echo message="Compiling test suite '${suitename}'"/>

        <javac srcdir="${source.test.dir}/${suitename}"
               destdir="${build.test.dir}"
               source="${javac.source.level}"
               target="${javac.target.level}"
               includeantruntime="false"
               debug="true" fork="true" deprecation="false" nowarn="true">

            <classpath path="${test.classpath}"/>
        </javac>
    </target>

    <target name="run-test" depends="init.testng, clean.results, copy.mediation-files" description="Run a specific test. Use -Dtest to set the class name (use -Dmodule to differenciate suites) for the test to run">
        <fail unless:set="test" message="The property test is missing. Use -Dtest=ClassName" />
        <property unless:set="module" name="module" value="*" />

        <!-- compile tests -->
        <antcall target="compile.tests">
            <param name="suitename" value="functional"/>
        </antcall>

        <path id="absolute.path.id">
            <fileset dir="${build.test.dir}" includes="**/${module}/${test}.class" />
        </path>
        <property name="absolute.path" value="${toString:absolute.path.id}" />

        <fail if:blank="${absolute.path}" message="Test class ${test} not found" />

        <echo message="Test ${test} found: ${absolute.path} in ${build.test.dir}" />

        <!-- run functional tests -->

        <echo message="Running test '${test}'"/>

        <testng suitename="Single test (${module}/${test}) Functional Suite"
                testname="${test}"
                dumpcommand="true"
                classfilesetref="absolute.path.id"
                classpath="${absolute.path}"
                classpathref="test.classpath"
                outputDir="${build.test-results.dir}/functional/xml"
                failureProperty="test.failure"
                haltonfailure="true"
                verbose="2">
        </testng>

        <antcall target="test.reports">
            <param name="suitename" value="functional"/>
        </antcall>

    </target>

    <target name="clean.tests">
        <delete dir="${build.test.dir}"/>
        <mkdir dir="${build.test.dir}"/>
        <antcall target="copy-resources"/>
    </target>

    <target name="clean.results" unless="test.noclean">
        <delete dir="${build.test-results.dir}"/>
        <mkdir dir="${build.test-results.dir}"/>

        <!-- only clean test results once per build, otherwise we lose our test reports -->
        <property name="test.noclean" value="true"/>
    </target>

    <target name="init.testng" depends="build-grails-ant-properties">
		<taskdef resource="testngtasks" classpathref="test.classpath"/>
    </target>



	<!--
		Shortcuts for common test groups
	-->

	<target name="test-ws">
		<antcall target="test-functional">
			<param name="testname" value="web-services"/>
		</antcall>
	</target>
	<target name="test-notes">
		<antcall target="test-functional">
			<param name="testname" value="web-services"/>
            <param name="groups" value="notes"/>
		</antcall>
	</target>

    <target name="test-diameter">
        <antcall target="test-functional">
            <param name="testname" value="diameter"/>
        </antcall>
    </target>

	<target name="test-pricing">		
		<antcall target="test-functional">
			<param name="testname" value="web-services"/>
			<param name="groups" value="pricing"/>
		</antcall>
	</target>
	
	<target name="test-integration">		
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
		</antcall>
	</target>

	<target name="test-mediation">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="mediation"/>
		</antcall>
	</target>
	
	<target name="test-hbase-mediation">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="hbase_mediation"/>
		</antcall>
	</target>
	
	<target name="test-audit">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="audit"/>
		</antcall>
	</target>
	
	<target name="test-subscription">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="subscription"/>
		</antcall>
	</target>

	<target name="test-provisioning">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="provisioning"/>
		</antcall>
	</target>

	<target name="test-partner">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="partner"/>
		</antcall>
	</target>

	<target name="test-process">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="process"/>
		</antcall>
	</target>

	<target name="test-account-type">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="accountType"/>
    	</antcall>
	</target>
        	
    <target name="test-billing">
        <antcall target="test-functional">
            <param name="testname" value="billing"/>
            <param name="groups" value="billing"/>
        </antcall>
    </target>

    <target name="test-payment">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="payment"/>
        </antcall>
    </target>

    <target name="test-order">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="order"/>
        </antcall>
    </target>

	<target name="test-pluggable">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="pluggable"/>
        </antcall>
    </target>

    <target name="test-pluggableTask">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="pluggableTask"/>
        </antcall>
    </target>

    <target name="test-processws">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="process"/>
        </antcall>
    </target>

    <target name="test-partnerws">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="partner"/>
        </antcall>
    </target>

    <target name="test-meta-fields">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="meta-fields"/>
        </antcall>
    </target>

    <target name="test-accountType">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="accountType"/>
        </antcall>
    </target>

    <target name="test-item">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="item"/>
        </antcall>
    </target>

    <target name="test-invoice">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="invoice"/>
        </antcall>
    </target>

    <target name="test-user">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="user"/>
        </antcall>
    </target>

    <target name="test-ageing">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="ageing"/>
		</antcall>
	</target>

	<target name="test-dynamic-balance">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="dynamic-balance"/>
		</antcall>
	</target>
    <target name="test-auto-recharge">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="auto-recharge"/>
		</antcall>
	</target>

 	<target name="test-purchase-auth">
		<antcall target="test-functional">
			<param name="testname" value="web-services"/>
			<param name="groups" value="purchase-auth"/>
		</antcall>
	</target>
 	<target name="test-pricing-rate-card">
		<antcall target="test-functional">
			<param name="testname" value="web-services"/>
			<param name="groups" value="pricing-rate-card"/>
		</antcall>
	</target>
	<target name="test-rate-cards">
        <antcall target="test-functional">
                <param name="testname" value="web-services"/>
                <param name="groups" value="route-rate-cards"/>
        </antcall>
	</target>

    <target name="test-single">
        <antcall target="test-functional">
            <param name="testname" value="test-single"/>
        </antcall>
    </target>
	
	<target name="test-currency">
		<antcall target="test-functional">
			<param name="testname" value="integration"/>
			<param name="groups" value="currency"/>
		</antcall>
	</target>

	<target name="selenium-ui-functional">
		<antcall target="test-functional">
			<param name="testname" value="selenium-ui-functional"/>
			<param name="groups" value="sanity"/>
		</antcall>
	</target>

    <target name="test-discounts">
        <antcall target="test-functional">
            <param name="testname" value="discounts"/>
            <param name="groups" value="discounts"/>
        </antcall>
    </target>

    <target name="test-usagePools">
        <antcall target="test-functional">
            <param name="testname" value="usagePools"/>
            <param name="groups" value="usagePools"/>
        </antcall>
    </target>

    <target name="test-orderStatus">
        <antcall target="test-functional">
            <param name="testname" value="orderStatus"/>
            <param name="groups" value="orderStatus"/>
        </antcall>
    </target>

    <target name="test-paymentMethod">
        <antcall target="test-functional">
            <param name="testname" value="paymentMethod"/>
            <param name="groups" value="paymentMethod"/>
        </antcall>
    </target>

	<target name="test-billing-and-discounts">
        <antcall target="test-functional">
            <param name="testname" value="billing-and-discounts"/>
            <param name="groups" value="billing-and-discounts"/>
        </antcall>
    </target>

    <target name="test-order-line-tier">
        <antcall target="test-functional">
            <param name="testname" value="order-line-tier"/>
            <param name="groups" value="order-line-tier"/>
        </antcall>
    </target>

    <target name="test-asset">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="asset-assignment"/>
        </antcall>
    </target>

    <target name="test-debug">
        <antcall target="test-functional">
            <param name="testname" value="debug"/>
            <param name="groups" value="debug"/>
        </antcall>
    </target>

    <target name="test-late-usage-rating">
        <antcall target="test-functional">
            <param name="testname" value="rating-late-usage"/>
            <param name="groups" value="plan-enhancements, late-usage"/>
        </antcall>
    </target>

    <target name="test-customer-enrollment">
        <antcall target="test-functional">
            <param name="testname" value="web-services"/>
            <param name="groups" value="customer-enrollment"/>
        </antcall>
    </target>

    <target name="test-entity">
        <antcall target="test-functional">
            <param name="testname" value="entity"/>
            <param name="groups" value="entity"/>
        </antcall>
    </target>

    <!-- Improper Access -->
    <target name="run-test-improper-access">
        <antcall target="run-test">
            <param name="test" value="ImproperAccessTest"/>
        </antcall>
    </target>

    <target name = "test-automation" depends = "init.testng, clean.results"
            description="Run UI Selenium-driven tests. Use -Dtestname and -Dgroups to control which test suites and groups are run.">

        <condition property="testngxml" value="testng.xml">
            <not>
                <isset property="testngxml"/>
            </not>
        </condition>

        <!-- compile tests -->
        <antcall target="compile.tests">
            <param name="suitename" value="automation"/>
        </antcall>

        <copy file="${source.test.dir}/log4j.properties" todir="${build.test.dir}"/>

        <testng suitename="${ant.project.name} Automation Test Suite"
                classpathref="test.classpath"
                outputDir="${build.test-results.dir}/automation/xml"
                failureProperty="test.failure"
                haltonfailure="true"
                verbose="2">

            <xmlfileset dir="${source.test.dir}/automation/resources/" includes="${testngxml}"/>
        </testng>

        <antcall target="test.reports">
            <param name="suitename" value="automation"/>
        </antcall>
    </target>

    <target name="test-enrollment">
        <antcall target="test-functional">
            <param name="testname" value="customer-enrollment"/>
            <param name="groups" value="customer-enrollment"/>
        </antcall>
    </target>

    <target name="test-edi-type">
        <antcall target="test-functional">
            <param name="testname" value="edi-type"/>
            <param name="groups" value="edi-type"/>
        </antcall>
    </target>

    <target name="test-company-metafield">
        <antcall target="test-functional">
            <param name="testname" value="company-metafield"/>
            <param name="groups" value="company-metafield"/>
        </antcall>
    </target>

    <target name="test-test-framework">
        <antcall target="test-functional">
            <param name="testname" value="test-framework"/>
            <param name="groups" value="test-framework"/>
        </antcall>
    </target>

    <target name="test-api-automation">
        <antcall target="test-functional">
            <param name="testname" value="api-automation"/>
            <param name="groups" value="api-automation"/>
        </antcall>
    </target>


    <target name="testrail-upload"
            depends="build-grails-ant-properties"
            description="Starts the process to upload test info to the TestRail repository.">

        <!-- Create build dir -->
        <delete dir="${build.test.dir}"/>
        <mkdir dir="${build.test.dir}"/>

        <antcall target="compile.tests">
            <param name="suitename" value="functional"/>
        </antcall>

        <!-- Compile test classes -->
        <javac srcdir="${source.test.dir}/functional/com/gurock/testrail"
               destdir="${build.test.dir}"
               source="${javac.source.level}"
               target="${javac.target.level}"
               includeantruntime="false" debug="true" fork="true" deprecation="false" nowarn="true">

            <classpath path="${test.classpath}"/>
        </javac>

        <!-- Start upload process -->
        <java classname="com.gurock.testrail.TestRailUpload" fork="true">
            <classpath>
                <pathelement location="${build.test.dir}"/>
                <path refid="test.classpath"/>
            </classpath>
        </java>

    </target>

</project>
